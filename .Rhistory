#list(first_element, union_merge(rest_of_list))
union_merge <- function(vecs){
if(!length(vecs)) return(c())
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
vec1 <- vecs[[1]]
vec2 <- vecs[[2]]
overlap <- max(vec1) > min(vec2) & min(vec1) < max(vec2) |
max(vec2) > min(vec1) & min(vec2) < max(vec1)
if(overlap){
union_merge(c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)]))
}else{
c(vec1, union_merge(vecs[-1]))
}
}
union_merge(vecs)
# if the first range overlaps with the second range,
# replace the first one with the new overlap, run the function on the new list
# if it does not, make a list:
#list(first_element, union_merge(rest_of_list))
union_merge <- function(vecs){
if(length(vecs) == 1) return(vecs)
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
vec1 <- vecs[[1]]
vec2 <- vecs[[2]]
overlap <- max(vec1) > min(vec2) & min(vec1) < max(vec2) |
max(vec2) > min(vec1) & min(vec2) < max(vec1)
if(overlap){
union_merge(c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)]))
}else{
c(vec1, union_merge(vecs[-1]))
}
}
union_merge(vecs)
vec1
list(vec1)
# if the first range overlaps with the second range,
# replace the first one with the new overlap, run the function on the new list
# if it does not, make a list:
#list(first_element, union_merge(rest_of_list))
union_merge <- function(vecs){
if(length(vecs) == 1) return(vecs)
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
vec1 <- vecs[[1]]
vec2 <- vecs[[2]]
overlap <- max(vec1) > min(vec2) & min(vec1) < max(vec2) |
max(vec2) > min(vec1) & min(vec2) < max(vec1)
if(overlap){
union_merge(c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)]))
}else{
c(list(vec1), union_merge(vecs[-1]))
}
}
union_merge(vecs)
vecs
if(1)1
vecs
vecs-2
vecs[-2]
max(vec[1])
max(vecs[1])
vecs[1]
i:i+1
i
i<-1
i:i+1
i:(i+1)
c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)])
vecs
#explicit/non-recursive solution
union_merge <- function(vecs){
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
i <- 1
while(i<length(vecs)){
vec1 <- vecs[[i]]
vec2 <- vecs[[i+1]]
overlap <- max(vec1) > min(vec2) & min(vec1) < max(vec2) |
max(vec2) > min(vec1) & min(vec2) < max(vec1)
if(overlap){
vecs <- c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)])
}else{
i <- i+1
}
}
}
#explicit/non-recursive solution
union_merge <- function(vecs){
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
i <- 1
while(i<length(vecs)){
vec1 <- vecs[[i]]
vec2 <- vecs[[i+1]]
overlap <- max(vec1) > min(vec2) & min(vec1) < max(vec2) |
max(vec2) > min(vec1) & min(vec2) < max(vec1)
if(overlap){
vecs <- c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)])
}else{
i <- i+1
}
}
return(vecs)
}
union_merge(vecs)
vecs
# if the first range overlaps with the second range,
# replace the first one with the new overlap, run the function on the new list
# if it does not, make a list:
#list(first_element, union_merge(rest_of_list))
#recursive two-function soln
merge_help <- function(vecs){
if(length(vecs) == 1) return(vecs)
vec1 <- vecs[[1]]
vec2 <- vecs[[2]]
overlap <- max(vec1) > min(vec2) & min(vec1) < max(vec2) |
max(vec2) > min(vec1) & min(vec2) < max(vec1)
if(overlap){
union_merge(c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)]))
}else{
c(list(vec1), union_merge(vecs[-1]))
}
}
union_merge <- function(vecs){
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
merge_help(vecs)
}
union_merge(vecs)
vecs
vecs
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
i <- 1
vec1 <- vecs[[i]]
vec2 <- vecs[[i+1]]
overlap <- max(vec1) > min(vec2) & min(vec1) < max(vec2) |
max(vec2) > min(vec1) & min(vec2) < max(vec1)
vec1
vec2
overlap
c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)])
vecs <- c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)])
vec1 <- vecs[[i]]
vec2 <- vecs[[i+1]]
vec1
vec2
overlap <- max(vec1) > min(vec2) & min(vec1) < max(vec2) |
max(vec2) > min(vec1) & min(vec2) < max(vec1)
overlap
i <- i+1
i
vec1 <- vecs[[i]]
vec2 <- vecs[[i+1]]
vec1
vec2
overlap <- (max(vec1) > min(vec2) & min(vec1) < max(vec2)) |
(max(vec2) > min(vec1) & min(vec2) < max(vec1))
vecs <- c(list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:2)])
overlap
vecs
[[1]]
[1] 1 4
[[2]]
[1] 2 3
[[3]]
[1] 5 8
[[4]]
[1] 6 7
vecs <- list(c(1,4), c(2,3), c(5,8), c(6,7))
vecs[1:i]
i
vecs[0]
list(list(), c(1,2))
c(list(), c(1,2))
c(list(), list(c(1,2)))
i
vecs
i
vecs[0:(i-1)]
vecs[-c(1:i)]
vecs
#explicit/non-recursive solution
union_merge <- function(vecs){
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
i <- 1
while(i<length(vecs)){
vec1 <- vecs[[i]]
vec2 <- vecs[[i+1]]
overlap <- (max(vec1) > min(vec2) & min(vec1) < max(vec2)) |
(max(vec2) > min(vec1) & min(vec2) < max(vec1))
if(overlap){
vecs <- c(vecs[0:(i-1)],
list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:i)])
}else{
i <- i+1
}
}
return(vecs)
}
union_merge(vecs)
vecs
old <- vecs
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
i <- 1
vec1 <- vecs[[i]]
vec2 <- vecs[[i+1]]
overlap <- (max(vec1) > min(vec2) & min(vec1) < max(vec2)) |
(max(vec2) > min(vec1) & min(vec2) < max(vec1))
if(overlap){
vecs <- c(vecs[0:(i-1)],
list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:i)])
}else{
i <- i+1
}
vecs
i
overlap
return(vecs)
#explicit/non-recursive solution
union_merge <- function(vecs){
vecs <- vecs[order(unlist(lapply(vecs, function(x) x[1])))]
i <- 1
while(i<length(vecs)){
vec1 <- vecs[[i]]
vec2 <- vecs[[i+1]]
overlap <- (max(vec1) > min(vec2) & min(vec1) < max(vec2)) |
(max(vec2) > min(vec1) & min(vec2) < max(vec1))
if(overlap){
vecs <- c(vecs[0:(i-1)],
list(c(min(vec1, vec2), max(vec1,vec2))),
vecs[-c(1:(i+1))])
}else{
i <- i+1
}
}
return(vecs)
}
union_merge(vecs)
vecs
vec <- sample(1:20, 20, replace = F)
vec
i <- length(vec)/2
i
i <- round(length(vec)/2)
i
?round
?split
split(vec,2)
?gsub
gsub("a", "f", c("asdf", "asdf"))
companyPrice <- c("123,000.00", "123", "12")
for(i in 1:length(companyPrice)) companyPrice[i] <- as.numeric(gsub(",", "", companyPrice[i]))
companyPrice
restart()
search()
mtcars
mtcars %>% lm(mpg~disp+hp+hp*drat)
library(tidyverse)
lm(mpg~disp+hp+hp*drat, mtcars)
lm(mpg~disp+hp+hp*drat, mtcars) %>% summary
iris
lm(Sepal.Length~ Sepal.Width + Petal.Length*Petal.Width, iris)
lm(Sepal.Length~ Sepal.Width + Petal.Length*Petal.Width, iris) %>% summary
lm(Sepal.Length~ Sepal.Width + Sepal.Width**Petal.Width, iris) %>% summary
lm(Sepal.Length~ Petal.Length + Sepal.Width*Petal.Width, iris) %>% summary
lm(Petal.Length~ Petal.Length*Petal.Width, iris) %>% summary
lm(Speal.Length~ Petal.Length*Petal.Width, iris) %>% summary
lm(Sepal.Length~ Petal.Length*Petal.Width, iris) %>% summary
lm(Sepal.Length~ Sepal.Width + Petal.Length*Petal.Width, iris) %>% summary
lm(Sepal.Length~ Petal.Length + Sepal.Width*Petal.Width, iris) %>% summary
lm(Petal.Width~ Sepal.Width + Petal.Length*Sepal.Length, iris) %>% summary
lm(Petal.Width~ Species + Petal.Length*Sepal.Width, iris) %>% summary
mod1 <- lm(Petal.Width~ Species + Petal.Length*Sepal.Width, iris)
predict(mod1)
iris$new.Sepal.Length  <- predict(mod1)
mod1
rm(iris)
mod1 <- lm(Petal.Width~ Species + Petal.Length*Sepal.Width, iris)
iris$Petal.Width  <- predict(mod1)
mod1
rm(iris)
mod1 <- lm(Petal.Width~ Species + Petal.Length*Sepal.Width, iris)
iris$new.Petal.Width  <- predict(mod1)
ggplot(aes(x = Petal.Length, y = new.Petal.Width, color = ))
ggplot(aes( y = new.Petal.Width, x = Petal.Length,color = Sepal.Width)) +
geom_line()
ggplot(iris, aes( y = new.Petal.Width, x = Petal.Length,color = Sepal.Width)) +
geom_line()
rm(iris)
iris
mtcars
lm(mpg~ disp+hp+hp*drat, mtcars)
lm(mpg~ disp+hp+hp*drat, mtcars) %>% summary
lm(mpg~ disp+hp+hp*wt, mtcars) %>% summary
lm(mpg~ disp+hp*wt, mtcars) %>% summary
round(121, 0)
round(121, -1)
round(121, -2)
round(121, -1)
floor(121)
floor(121,-1)
round(126,-2)
round(126,-1)
mtcars$wt
mtcars$wt %>% summary
?ggtitle
?geom_title
?geom_tile
ggplot(mtcars, aes(y = wt, x = hp,fill = wt)) +
geom_tile()
volcano %>%
# Data wrangling
as_tibble() %>%
rowid_to_column(var="X") %>%
gather(key="Y", value="Z", -1)
ggplot(mtcars, aes(y = wt, x = hp,fill = wt)) +
geom_tile() +
scale_fill_viridis()
library(viridis)
ggplot(mtcars, aes(y = wt, x = hp,fill = wt)) +
geom_tile() +
scale_fill_viridis()
mtcars
ggplot(mtcars, aes(y = wt, x = hp,fill = wt)) +
geom_raster() +
viridis::scale_fill_viridis()
ggplot(mtcars, aes(y = newmpg, x = hp,fill = wt)) +
geom_raster() +
viridis::scale_fill_viridis()
mtcars <- mtcars %>%
mutate(newmpg = predict(mod1))
rm(mtcars)
mod1 <- lm(mpg~ disp+hp*wt, mtcars)
mtcars$newmpg <- predict(mod1)
mtcars <- mtcars %>%
mutate(newmpg = predict(mod1))
ggplot(mtcars, aes(y = newmpg, x = hp,fill = wt)) +
geom_raster() +
viridis::scale_fill_viridis()
ggplot(mtcars, aes(y = newmpg, x = hp,fill = wt)) +
geom_tile() +
viridis::scale_fill_viridis()
mtcars
ggplot(mtcars, aes(y = newmpg, x = hp,fill = wt)) +
geom_point()
summary(mtcars$wt)
floor(mtcars$wt)
mtcars <- mtcars %>%
mutate(newmpg = predict(mod1),
wt_factor = as.factor(floor(wt)))
mtcars
ggplot(mtcars, aes(y = newmpg, x = hp, color = wt)) +
geom_smooth() +
viridis::scale_fill_viridis()
ggplot(mtcars, aes(y = newmpg, x = hp, group = wt)) +
geom_smooth()
ggplot(mtcars, aes(y = newmpg, x = hp, group = wt_factor)) +
geom_smooth()
iris
nrow(iris)
mod1 <- lm(Petal.Width~ Species + Petal.Length*Sepal.Width, iris)
mod1
summary(mod1)
hist(iris$Petal.Length)
hist(Sepal.Width)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
iris <- iris %>%
mutate(newpwidth= predict(mod1),
plength_factor = floor(Petal.Length))
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth()
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth()
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_line()
mod1 <- lm(Petal.Width~ Petal.Length*Sepal.Width, iris)
iris <- iris %>%
mutate(newpwidth= predict(mod1),
plength_factor = floor(Petal.Length))
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_line()
mod1
predict(mod1)
ggplot(iris, aes( y = newpwidth, x= Sepal.Width, fill = Petal.Length)) +
geom_raster()
ggplot(iris, aes(newpwidth, Sepal.Width, fill = Petal.Length)) +
geom_raster()
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_line()
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth()
iris
mod1 <- lm(Petal.Width~ Petal.Length*Sepal.Width, iris)
iris <- iris %>%
mutate(newpwidth= predict(mod1),
plength_factor = floor(Petal.Length))
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth()
mod1 <- lm(Petal.Width~ Petal.Length*Sepal.Width, iris)
iris <- iris %>%
mutate(newpwidth= predict(mod1),
plength_factor = as.factor(floor(Petal.Length)))
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth() +
labs(color = levels(plength_factor))
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth() +
labs(color = unique(plength_factor))
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth() +
labs(color = plength_factor)
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth() +
labs(group = plength_factor)
iris <- iris %>%
mutate(newpwidth= predict(mod1),
plength_factor = as.factor(floor(Petal.Length)))
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth()
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor)) +
geom_smooth() +
geom_point()
unique(iris$plength_factor)
ggplot(iris, aes(y = newpwidth, x = Sepal.Width, group = plength_factor, color = plength_factor)) +
geom_smooth() +
geom_point()
ggplot(iris, aes(y = newpwidth, x = Sepal.Width,
group = plength_factor, color = plength_factor)) +
geom_smooth() +
geom_point() +
labs(color = "Floored Petal Length")
ggplot(iris, aes(y = newpwidth, x = Sepal.Width,
group = plength_factor, color = plength_factor)) +
geom_smooth() +
geom_point() +
labs(color = "Floored Petal Length", y = "Predicted Petal Width")
flights
library(nycflights13)
flights
mod1 <- lm(dep_delay ~ distance*air_time)
mod1 <- lm(dep_delay ~ distance*air_time, flights)
mmod1
mod1
summary(mod1)
flights %>%
mutate(pred_delay = predict(mod1))
mod1 <- lm(dep_delay ~ distance*air_time, flights)
mod1 <- lm(dep_delay ~ distance*air_time, drop_na(flights))
flights %>% drop_na()
mutate(pred_delay = predict(mod1))
flights %>% drop_na(distance,air_time) %>%
mutate(pred_delay = predict(mod1))
mod1 <- lm(dep_delay ~ distance*air_time, flights)
flights %>% drop_na(distance,air_time) %>%
mutate(pred_delay = predict(mod1))
flights %>% drop_na(distance,air_time) %>%
mutate(pred_delay = predict(mod1)) %>%
ggplot(aes(y = pred_delay, x =  distance, fill = air_time)) +
geom_raster()
flights %>% drop_na(distance,air_time) %>%
mutate(pred_delay = predict(mod1)) %>%
ggplot(aes(y = pred_delay, x =  distance, fill = air_time)) +
geom_tile()
flights %>% drop_na(distance,air_time) %>%
mutate(pred_delay = predict(mod1)) %>%
ggplot(aes(y = pred_delay, x =  distance, color = air_time)) +
geom_point()
library(devtools)
library(tidyverse)
install_github("marcusvolz/mathart")
detach("package:tidyverse")
install_github("marcusvolz/mathart")
install_github("marcusvolz/mathart")
install.packages("devtools")
library(devtools)
install_github("marcusvolz/mathart")
?animate
#ggplot2 .... art??? first try
#from https://github.com/marcusvolz/mathart
library(mathart)
library(tidyverse)
library(gganimate)
set.seed(2)
base <- lissajous(a = runif(1, 0, 2),
b = runif(1, 0, 2),
A = runif(1, 0, 2),
B = runif(1, 0, 2),
d = 200) %>%
sample_n(1001)
df <- map_dfr(2:30, function(x){
message(x)
k_nearest_neighbour_graph(base, x) %>% mutate(k = !!x)
})
lissajous <- ggplot(df, aes(x, y, xend = xend, yend = yend)) +
geom_segment(size = 0.03) +
coord_equal() +
theme_blankcanvas(margin_cm = 0) +
transition_states(
k,
transition_length = 1,
state_length = 1
)
?animate
