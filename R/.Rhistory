NULL))
apply(stri, 1, function(x) ifelse(length(unique(x)) == ncol(stri),
paste0(x, collapse = ""),
NA_character_))
complete.cases(  apply(stri, 1, function(x) ifelse(length(unique(x)) == ncol(stri),
paste0(x, collapse = ""),
NA_character_)))
?complete.cases
na.omit(  apply(stri, 1, function(x) ifelse(length(unique(x)) == ncol(stri),
paste0(x, collapse = ""),
NA_character_)))
permute <- function(vec){
stri <- strsplit(stri, "")[[1]]
stri <- expand.grid(rep(list(stri), length(stri)))
na.omit(apply(stri, 1, function(x) ifelse(length(unique(x)) == ncol(stri),
paste0(x, collapse = ""),
NA_character_)))
}
permute("asdf")
permute <- function(stri){
stri <- strsplit(stri, "")[[1]]
stri <- expand.grid(rep(list(stri), length(stri)))
na.omit(apply(stri, 1, function(x) ifelse(length(unique(x)) == ncol(stri),
paste0(x, collapse = ""),
NA_character_)))
}
permute("asdf")
?na.omit
?aapply(array, margin, ...)
?apply
presidents
cycle(presidents)
permute2 <- function(stri){
stri <- strsplit(stri, "")[[1]]
stri <- expand.grid(rep(list(stri), length(stri)))
stri <- apply(stri, 1, function(x) ifelse(length(unique(x)) == ncol(stri),
paste0(x, collapse = ""),
NA_character_))
stri[!is.na(stri)]
}
permute <- function(stri){
if(!nchar(stri)) return("")
unlist(lapply(1:nchar(stri), function(i){
paste0(substr(stri, i, i),
permute(paste0(substr(stri, 0, i-1),
substr(stri, i+1, nchar(stri)))))
}))
}
permute2("asdf")
permute2("asdf") %>% sort
library(tidyverese)
library(tidyverse)
permute2("asdf") %>% sort
permute("asdf") %>% sort
library(microbenchmark)
?microbenchmark
microbenchmark(permute("asdfoejfie"), permute2("asdfoejfie"),
times = 100)
microbenchmark(permute("asdfoej"), permute2("asdfoej"),
times = 100)
microbenchmark(permute("asdfoej"), permute2("asdfoej"),
times = 1)
permute("asdf")
permute("asdfo")
permute("asdfoe")
permute("asdfoej")
permute2("asdf")
permute2("asdfo")
permute2("asdfoe")
permute2("asdfoej")
microbenchmark(permute("asdfoej"), permute2("asdfoej"),
times = 1)
?expand.grid
combn("asdf", 4)
?combn
combn(c("a","s","d","f"), 4)
combn(c("a","s","d","f"), 4, simplify = F)
combn(list(c("a","s"), c("a","s")))
combn(list(c("a","s"), c("a","s")), 2)
combn(list(c("a","s"), c("a","s")), 2, simplify = F)
combn(list(c("a","s", "d", "f"), c("a","s", "d","f")), 2, simplify = F)
c()
c(1,c())
is.null(c())
any
?any
any(1,1)
any(T, T)
split_vec <- function(vec, l1 = NULL, l2 = NULL){
if(!length(vec)) return(sum(l1) == sum(l2))
any(split_vec(vec[-1], l1, c(vec[1], l2)),
split_vec(vec[-1], c(vec[1], l1), l2))
}
split_vec(1:2)
split_vec(2:2)
vec <- 2:2
vec <- c(5,2,3)
l1 <- NULL
l2 <- NULL
c(vec[1], l2)
c(vec[1], l1)
split_vec(2:3, l1, 5)
vec[-1]
vec
split_vec(vec)
vec
split_vec(2:2)
split_vec(2:3)
split_vec(1:4)
1+2
is.list(1:4)
is.list(list(1:4, 1:4))
split_vec(c(2,2))
split_vec(c(2,2,4))
split_vec(c(2,2,3))
split_vec(c(2,2,5))
[1,2]
?vapply
a.2 <- vapply(v, f2, outer(1:3, 1:5), y = 2*(1:5))
f2 <- function(x, y) outer(rep(x, length.out = 3), y)
a.2 <- vapply(v, f2, outer(1:3, 1:5), y = 2*(1:5))
(v <- structure(10*(5:8), names = LETTERS[1:4]))
a.2 <- vapply(v, f2, outer(1:3, 1:5), y = 2*(1:5))
a.2
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = "array"))
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = "array"))
(a2 <- sapply(v, f2, y = 2*(1:5)))
(a2 <- sapply(v, f2, y = 2*(1:5)), simplify = T)
(a2 <- sapply(v, f2, y = 2*(1:5)), simplify = T))
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = T))
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = T))
%>% class
#solution 1: lapply()
balance <- function(vec){
lapply(1:length(vec), function(i){
sum(vec[1:i]) == sum(vec[i:length(vec)])
})
}
balance(1:4)
balance(2,2)
balance(c(2,2))
vec <- c(2,2)
i
sum(vec[1:i])
sum(vec[i:length(vec)])
#solution 1: lapply()
balance <- function(vec){
lapply(1:length(vec), function(i){
sum(vec[1:i]) == sum(vec[(i+1):length(vec)])
})
}
balance(c(2,2))
balance(c(2,2)) %>% any
balance(c(2,3)) %>% any
balance(c(2,4)) %>% any
balance(c(2,4)) %>% unlist %>% any
?any
}
#solution 1: lapply()
balance <- function(vec){
lapply(1:(length(vec)-1), function(i){
sum(vec[1:i]) == sum(vec[(i+1):length(vec)])
})
}
balance(c(2,4))
balance(c(2,4,6))
balance(c(2,4,6)) %>% any
balance(c(2,4,6)) %>% unlist
balance(c(2,4,6)) %>% unlist %>% any
?any
#solution 1: lapply()
balance <- function(vec){
sapply(1:(length(vec)-1), function(i){
sum(vec[1:i]) == sum(vec[(i+1):length(vec)])
})
}
balance(c(2,4,6)) %>% unlist %>% any
balance(c(2,4,6))
#solution 1: lapply()
balance <- function(vec){
any(sapply(1:(length(vec)-1), function(i){
sum(vec[1:i]) == sum(vec[(i+1):length(vec)])
}))
}
balance
balance(c(1, 1, 1, 2, 1))
#Solution 2: recursive
balance <- function(vec){
if(!length(vec)) FALSE
any(vec[1] == sum(vec[-1]),
balance(vec[-1]))
}
balance(c(1, 1, 1, 2, 1))
balance(1)
balance()
balance(c())
balance(vector())
length(vector())
#Solution 2: recursive
balance <- function(vec){
if(!length(vec)) return(FALSE)
any(vec[1] == sum(vec[-1]),
balance(vec[-1]))
}
balance(1)
balance(c(1, 1, 1, 2, 1))
#Solution 2: recursive with carry-through argument
balance <- function(vec, rest = NULL){
if(!length(vec)) return(FALSE)
any(c(rest, vec) == sum(vec[-1]),
balance(vec[-1], c(rest,vec)))
}
balance(c(1, 1, 1, 2, 1))
#solution 1: sapply()
balance1 <- function(vec){
any(sapply(1:(length(vec)-1), function(i){
sum(vec[1:i]) == sum(vec[(i+1):length(vec)])
}))
}
#Solution 2: recursive with carry-through argument
balance <- function(vec, rest = NULL){
if(!length(vec)) return(FALSE)
any(c(rest, vec) == sum(vec[-1]),
balance(vec[-1], c(rest,vec)))
}
?microbenchmark
microbenchmark(balance1(1,1,1,2,1),
balance(1,1,1,2,1),
times = 1000)
microbenchmark(balance1(c(1,1,1,2,1)),
balance(c(1,1,1,2,1)),
times = 1000)
#Solution 3: recursive with helper function
balance_help <- function(vec, rest = NULL){
if(!length(vec)) return(NULL)
c(c(rest, vec) == sum(vec[-1]),
balance(vec[-1], c(rest,vec)))
}
balance <- function(vec){
any(balance_help(vec))
}
balance(c(1,1,1,2,1))
#Solution 3: recursive with helper function
balance_help <- function(vec, rest = NULL){
if(!length(vec)) return(NULL)
c(c(rest, vec) == sum(vec[-1]),
balance_help(vec[-1], c(rest,vec)))
}
balance <- function(vec){
any(balance_help(vec))
}
balance(c(1,1,1,2,1))
microbenchmark(balance1(c(1,1,1,2,1)),
balance(c(1,1,1,2,1)),
balance2(c(1,1,1,2,1)),
times = 1000)
c(c(rest, vec) == sum(vec[-1]),
balance_help(vec[-1], c(rest,vec)))
balance2 <- function(vec){
any(balance_help(vec))
}
microbenchmark(balance1(c(1,1,1,2,1)),
balance(c(1,1,1,2,1)),
balance2(c(1,1,1,2,1)),
times = 1000)
#Solution 3: recursive with helper function
balance_help <- function(vec, rest = NULL){
if(!length(vec)) return(NULL)
c(c(rest, vec) == sum(vec[-1]),
balance_help(vec[-1], c(rest,vec)))
}
balance2 <- function(vec){
any(balance_help(vec))
}
microbenchmark(balance1(c(1,1,1,2,1)),
balance(c(1,1,1,2,1)),
balance2(c(1,1,1,2,1)),
times = 1000)
#Solution 1: sapply()
span <- function(vec){
max(sapply(unique(vec), function(x){
w <- which(x == vec)
max(w) - min(w)
}))
}
span(c(1,2,1,1,))
span(c(1,2,1,1,3))
span(c(1, 4, 2, 1, 4, 1, 4))
span(c(1, 4, 2, 1, 4, 4, 4))
#Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.
#countClumps([1, 2, 2, 3, 4, 4]) → 2
#countClumps([1, 1, 2, 1, 1]) → 2
#countClumps([1, 1, 1, 1, 1]) → 1
clumps <- function(vec, in_clump = F){
if(!length(vec)) return(0)
if(in_clump){
ifelse(vec[1] == vec[2],
clumps(vec[-1], T),
clumps(vec[-1], F))
} else {
ifelse(vec[1] == vec[2],
1 + clumps(vec[-1], T),
clumps(vec[-1], F))
}
}
clumps(c(1, 2, 2, 3, 4, 4))
clumps(1)
clumps(c())
clumps(4)
vec <- 4
ifelse(vec[1] == vec[2],
1 + clumps(vec[-1], T),
clumps(vec[-1], F))
vec[1] == vec[2]
#Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.
#countClumps([1, 2, 2, 3, 4, 4]) → 2
#countClumps([1, 1, 2, 1, 1]) → 2
#countClumps([1, 1, 1, 1, 1]) → 1
clumps <- function(vec, in_clump = F){
if(length(vec) == 1) return(0)
if(in_clump){
ifelse(vec[1] == vec[2],
clumps(vec[-1], T),
clumps(vec[-1], F))
} else {
ifelse(vec[1] == vec[2],
1 + clumps(vec[-1], T),
clumps(vec[-1], F))
}
}
clumps(c(1, 2, 2, 3, 4, 4))
clumps(c(1, 1, 2, 1, 1))
clumps(c(1, 1, 1, 1, 1))
clumps(1, 1, 1, 1, 1)
clumps(c(1, 1, 1, 1, 1))
#Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.
#countClumps([1, 2, 2, 3, 4, 4]) → 2
#countClumps([1, 1, 2, 1, 1]) → 2
#countClumps([1, 1, 1, 1, 1]) → 1
clumps <- function(vec, in_clump = F){
if(length(vec) == 1) return(0)
ifelse(vec[1] == vec[2],
in_clump + clumps(vec[-1], T),
clumps(vec[-1], F))
}
clumps(c(1, 1, 1, 1, 1))
clumps(c(1, 1, 2, 1, 1))
#Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.
#countClumps([1, 2, 2, 3, 4, 4]) → 2
#countClumps([1, 1, 2, 1, 1]) → 2
#countClumps([1, 1, 1, 1, 1]) → 1
clumps <- function(vec, in_clump = F){
if(length(vec) == 1) return(0)
ifelse(vec[1] == vec[2],
!in_clump + clumps(vec[-1], T),
clumps(vec[-1], F))
}
clumps(c(1, 1, 2, 1, 1))
FALSE + TRUE
FALSE + 1
clumps(c(1,1))
!F
!F + 0
#Say that a "clump" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.
#countClumps([1, 2, 2, 3, 4, 4]) → 2
#countClumps([1, 1, 2, 1, 1]) → 2
#countClumps([1, 1, 1, 1, 1]) → 1
clumps <- function(vec, in_clump = F){
if(length(vec) == 1) return(0)
ifelse(vec[1] == vec[2],
as.numeric(!in_clump) + clumps(vec[-1], T),
clumps(vec[-1], F))
}
clumps(c(1,1))
clumps(c(1, 1, 2, 1, 1))
clumps(c(1, 2, 2, 3, 4, 4))
clumps(c(1, 1, 1, 1, 1))
#solution 2: looping
clumps <- function(vec){
in_clump <- F
val <- 0
for(i in 1:vec){
if((vec[i] == vec[i+1]) & !in_clump) val <- val+1
next
}
}
clumps(c(1, 1, 1, 1, 1))
vec[0]
vec
#solution 2: looping
clumps <- function(vec){
in_clump <- F
val <- 0
for(i in 1:(length(vec)-1)){
if((vec[i] == vec[i+1]) & !in_clump) val <- val+1
next
}
}
clumps(c(1, 1, 1, 1, 1))
#solution 2: looping
clumps <- function(vec){
in_clump <- F
val <- 0
for(i in 1:(length(vec)-1)){
if((vec[i] == vec[i+1]) & !in_clump) val <- val+1
next
}
return(val)
}
clumps(c(1, 1, 1, 1, 1))
#solution 2: looping
clumps <- function(vec){
in_clump <- F
val <- 0
for(i in 1:(length(vec)-1)){
if((vec[i] == vec[i+1]) & !in_clump){
val <- val+1; in_clump <- T
} else if(vec[i] != vec[i+1]){
in_clump <- F
}
next
}
return(val)
}
clumps(c(1, 1, 1, 1, 1))
clumps(c(1, 2, 2, 3, 4, 4))
clumps(c(1, 1, 2, 1, 1))
table(c(1,1,1,1,1))
?rle
rle(c(1,1,1,1,1))
rle(c(1,1,1,1,1, 2,1))
#the rle "best" version
clumps <- function(vec){
sum(rle(vec)$lengths>1)
}
clumps(c(1, 2, 2, 3, 4, 4))
clumps(c(1, 1, 2, 1, 1))
runif(1,1:10)
?runif
runif(10, 1:10)
runif(1,0,10)
runif(10,0,10)
vec <- sample(1:100, 1000, replace = T)
vec
unique(vec)
table(vec)
table(vec) %>% sort
histogram(vec)
hist(vec)
clumps(vec)
microbenchmark(
clumps1(vec),
clumps2(vec),
clumps3(vec)
)
#the rle "best" version
clumps1 <- function(vec){
sum(rle(vec)$lengths>1)
}
clumps2 <- function(vec, in_clump = F){
if(length(vec) == 1) return(0)
ifelse(vec[1] == vec[2],
as.numeric(!in_clump) + clumps(vec[-1], T),
clumps(vec[-1], F))
}
#really wanna get rid of that optional argument
#need some kind of mutable memory
#solution 2: looping
clumps3 <- function(vec){
in_clump <- F
val <- 0
for(i in 1:(length(vec)-1)){
if((vec[i] == vec[i+1]) & !in_clump){
val <- val+1; in_clump <- T
} else if(vec[i] != vec[i+1]){
in_clump <- F
}
}
return(val)
}
#so clunky
vec <- sample(1:100, 1000, replace = T)
microbenchmark(
clumps1(vec),
clumps2(vec),
clumps3(vec)
)
clumps2 <- function(vec, in_clump = F){
if(length(vec) == 1) return(0)
ifelse(vec[1] == vec[2],
as.numeric(!in_clump) + clumps2(vec[-1], T),
clumps2(vec[-1], F))
}
#solution 2: looping
clumps3 <- function(vec){
in_clump <- F
val <- 0
for(i in 1:(length(vec)-1)){
if((vec[i] == vec[i+1]) & !in_clump){
val <- val+1; in_clump <- T
} else if(vec[i] != vec[i+1]){
in_clump <- F
}
}
return(val)
}
vec <- sample(1:100, 1000, replace = T)
microbenchmark(
clumps1(vec),
clumps2(vec),
clumps3(vec)
)
